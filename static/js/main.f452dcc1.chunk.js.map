{"version":3,"sources":["components/Sub.js","components/Travel.js","components/Response.js","pages/InsideShack.js","pages/Shack.js","hooks/useInterval.js","mechanisms/TSense.js","pages/Greenhouse.js","pages/OutsideGreenhouse.js","pages/Grove.js","pages/Floodgate.js","pages/Seaside.js","pages/Intro.js","util/StoryContext.js","components/Story.js","App.js","serviceWorker.js","index.js"],"names":["Sub","props","Fragment","className","onClick","c","children","Travel","to","Response","id","text","InsideShack","useContext","StoryContext","state","setState","useState","interactText","setInteractText","inv","prev","floodgateOpen","page","Shack","lookDoor","shackOpen","useInterval","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","TSense","index","setIndex","p","items","length","speed","Greenhouse","OutsideGreenhouse","Grove","Floodgate","encloseAll","raiseGate","hasStone","Seaside","Intro","React","createContext","StoryProvider","Provider","value","Story","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f452dcc1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Sub = props => {\r\n    return (\r\n        <React.Fragment>\r\n            <span className=\"info-span\" onClick={props.c}>\r\n                {props.children}\r\n            </span>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Sub;\r\n","import React from \"react\";\r\n\r\nconst Travel = props => {\r\n    return (\r\n        <React.Fragment>\r\n            <span className=\"travel-span\" onClick={props.to}>\r\n                {props.children}\r\n            </span>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Travel;\r\n","import React from \"react\";\r\nconst Response = props => {\r\n    return (\r\n        <React.Fragment>\r\n            <div id=\"response-border\"></div>\r\n            <p id=\"response\">{props.text} </p>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Response;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { StoryContext } from \"../util/StoryContext\";\r\nimport Sub from \"../components/Sub\";\r\nimport Travel from \"../components/Travel\";\r\nimport Response from \"../components/Response\";\r\nimport { AnimateOnChange } from \"react-animation\";\r\nimport Shack from \"./Shack\";\r\n\r\nconst InsideShack = () => {\r\n  const [state, setState] = useContext(StoryContext);\r\n  const [interactText, setInteractText] = useState(\"\");\r\n  const lookPhoto = () => {\r\n    setInteractText(\r\n      \"Beneath the foggy glass is a black and white portrait of a young woman. Her expression is blank, and she sits under a blanket of a dress in a studio of some kind. The condition of the photo and her clothing imply that it was taken a long time ago. You don't recognize her.\"\r\n    );\r\n  };\r\n  const lookKnacks = () => {\r\n    setInteractText(\r\n      \"A small collection of handmade wooden toys - tops, rocking horses, and dolls. They are well made, but a handful of imperfections imply their creator was not a master of his craft. None of them seem immediately useful.\"\r\n    );\r\n  };\r\n  const reportLever = () => {\r\n    if (!state.inv[\"floodgateOpen\"]) {\r\n      setState(prev => ({\r\n        ...prev,\r\n        inv: { ...prev.inv, floodgateOpen: true }\r\n      }));\r\n      setInteractText(\r\n        \"The lever is almost impossibly heavy, but after straining your back it slowly snaps into position with a satisfying, resonant snap. You hear a mechanical roar from somewhere west on the island, as if something massive was pulled into the sky.\"\r\n      );\r\n    } else {\r\n      setInteractText(\"You have already moved the lever.\");\r\n    }\r\n  };\r\n  const lookBed = () => {\r\n    setInteractText(\r\n      \"Queen-sized, and nestled snug against the wall. The sheets are a blue and white plaid, faded, and the bed is neatly made. The single pillow at the head is leaking feathers onto the floor below. There doesn't seem to be anything under it.\"\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <h2>Inside the Abandoned Shack</h2>\r\n      <p>\r\n        The air is stale and still, and despite the long-abandoned state of the\r\n        shack it has an intangible sensation of comfort. It is a single room,\r\n        containing only a desk and a <Sub c={lookBed}>bed</Sub>. Cobwebs litter\r\n        the corners of the ceiling, and dust lines each surface. On a desk below\r\n        a window sits a <Sub c={lookPhoto}>framed photograph</Sub> and a few\r\n        assorted <Sub c={lookKnacks}>knick-knacks</Sub>. A conspicuous{\" \"}\r\n        <Sub c={reportLever}>lever</Sub> sits beside the desk. The door leads{\" \"}\r\n        <Travel to={() => setState(prev => ({ ...prev, page: <Shack /> }))}>\r\n          {\" \"}\r\n          back out to the beach.\r\n        </Travel>\r\n      </p>\r\n      <AnimateOnChange>\r\n        <Response text={interactText} />\r\n      </AnimateOnChange>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InsideShack;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { StoryContext } from \"../util/StoryContext\";\r\nimport Sub from \"../components/Sub\";\r\nimport Travel from \"../components/Travel\";\r\nimport Response from \"../components/Response\";\r\nimport { AnimateOnChange } from \"react-animation\";\r\nimport InsideShack from \"./InsideShack\";\r\nimport Seaside from \"./Seaside\";\r\n\r\nconst Shack = props => {\r\n  const [state, setState] = useContext(StoryContext);\r\n  const [interactText, setInteractText] = useState(\"\");\r\n  const lookGull = () => {\r\n    setInteractText(\r\n      \"The gull's voice is faint, distant. The birds avoid this place.\"\r\n    );\r\n  };\r\n\r\n  const lookDoor = () => {\r\n    if (state.inv[\"hasStone\"] && !state.inv[\"shackOpen\"]) {\r\n      setState(prev => ({\r\n        ...prev,\r\n        inv: { ...prev.inv, shackOpen: true }\r\n      }));\r\n      setInteractText(\r\n        \"With only a moment of hesitation, you throw the rock through the door's window, shattering it. You reach inside and open the lock, and the door slowly drifts open.\"\r\n      );\r\n    } else {\r\n      setInteractText(\r\n        \"The door is heavy, and it refuses to open. Through the small diamond-shaped window, you can see the deadbolt locked in place. Perhaps if you could break the window...\"\r\n      );\r\n    }\r\n  };\r\n  const shackStatus = () => {\r\n    return state.inv[\"shackOpen\"] ? (\r\n      <span>\r\n        The door{\" \"}\r\n        <Travel\r\n          to={() => setState(prev => ({ ...prev, page: <InsideShack /> }))}\r\n        >\r\n          into the shack\r\n        </Travel>{\" \"}\r\n        sits open, bobbing slightly in the wind.\r\n      </span>\r\n    ) : (\r\n      <span>\r\n        The <Sub c={lookDoor}>door to the shack</Sub> is closed, and has clearly\r\n        not been open in quite some time.\r\n      </span>\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <h2>Abandoned Shack</h2>\r\n      <p>\r\n        Dense pine boards scored by wind and sand, the humble shack lies\r\n        situated atop a small outcropping of rocks overlooking the sea. Its roof\r\n        is half-collapsed, and if anyone ever lived here they are gone now. The\r\n        windows are painted with permanent haze, and the walls with cracked red\r\n        paint. {shackStatus()} Somewhere in the distance, a{\" \"}\r\n        <Sub c={lookGull}>gull</Sub> cries out. The path you trod to get here\r\n        winds back down, inviting a{\" \"}\r\n        <Travel to={() => setState(prev => ({ ...prev, page: <Seaside /> }))}>\r\n          return to the shore.\r\n        </Travel>\r\n      </p>\r\n      <AnimateOnChange>\r\n        <Response text={interactText} />\r\n      </AnimateOnChange>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Shack;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\n\r\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\nfunction useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\nexport default useInterval;\r\n","import React, { useState, useContext } from \"react\";\r\nimport useInterval from \"../hooks/useInterval\";\r\nimport { AnimateOnChange } from \"react-animation\";\r\n\r\n/* A span element that alternates between the values defined by the passed array\r\nUsage:        <TSense\r\n          speed={1500}\r\n          items={[\"disappointed\", \"upbeat\", \"melancholy\", \"hungry\"]}\r\n        />*/\r\n\r\nconst TSense = props => {\r\n  const [index, setIndex] = useState(0);\r\n  const next = () => {\r\n    setIndex(p => {\r\n      return (p += 1);\r\n    });\r\n    if (index >= props.items.length - 1) {\r\n      setIndex(0);\r\n    }\r\n  };\r\n  useInterval(() => {\r\n    next();\r\n  }, props.speed);\r\n  return <AnimateOnChange>{props.items[index]}</AnimateOnChange>;\r\n};\r\n\r\nexport default TSense;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { StoryContext } from \"../util/StoryContext\";\r\nimport Sub from \"../components/Sub\";\r\nimport Travel from \"../components/Travel\";\r\nimport Response from \"../components/Response\";\r\nimport { AnimateOnChange } from \"react-animation\";\r\nimport OutsideGreenhouse from \"./OutsideGreenhouse\";\r\n\r\nconst Greenhouse = props => {\r\n  const [state, setState] = useContext(StoryContext);\r\n  const [interactText, setInteractText] = useState(\"\");\r\n  const lookMist = () => {\r\n    setInteractText(\r\n      \"You trace the pipes that lead into them - it looks like they draw water from the nearby river.\"\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <h2>The Greenhouse</h2>\r\n      <p>\r\n        The air is thick and humid inside, sunlight trapped inside the foggy\r\n        windows that make up its walls and ceiling. From above, an array of{\" \"}\r\n        <Sub c={lookMist}>evenly-spaced rods gently mist water</Sub> onto the\r\n        flora below. The{\" \"}\r\n        <Travel\r\n          to={() =>\r\n            setState(prev => ({ ...prev, page: <OutsideGreenhouse /> }))\r\n          }\r\n        >\r\n          door back outside\r\n        </Travel>{\" \"}\r\n        creaks slightly as it moves with the wind.\r\n      </p>\r\n      <AnimateOnChange>\r\n        <Response text={interactText} />\r\n      </AnimateOnChange>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Greenhouse;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { StoryContext } from \"../util/StoryContext\";\r\nimport Sub from \"../components/Sub\";\r\nimport Travel from \"../components/Travel\";\r\nimport Response from \"../components/Response\";\r\nimport { AnimateOnChange } from \"react-animation\";\r\nimport Grove from \"./Grove\";\r\nimport Greenhouse from \"./Greenhouse\";\r\n\r\nconst OutsideGreenhouse = props => {\r\n  const [state, setState] = useContext(StoryContext);\r\n  const [interactText, setInteractText] = useState(\"\");\r\n  const lookHouse = () => {\r\n    setInteractText(\r\n      \"The windows of the greenhouse are largely obscured by dust and grime, but you see greenery though the muck.\"\r\n    );\r\n  };\r\n  const lookMachine = () => {\r\n    setInteractText(\r\n      \"The size of a large vehicle, a deep roar comes from inside its shaking carapice. It is covered in miscoloured sheets of corregated metal, as it pieces of it have been replaced over time. A small control panel sits attached to its side.\"\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <h2>Outside The Greenhouse</h2>\r\n      <p>\r\n        In the middle of the a small, sunny field sits a{\" \"}\r\n        <Sub c={lookHouse}>greenhouse</Sub>, its{\" \"}\r\n        <Travel\r\n          to={() => setState(prev => ({ ...prev, page: <Greenhouse /> }))}\r\n        >\r\n          door\r\n        </Travel>{\" \"}\r\n        sitting open. Beside it resides a{\" \"}\r\n        <Sub c={lookMachine}>massive machine</Sub>, emitting a deep mechanical\r\n        hum. The{\" \"}\r\n        <Travel to={() => setState(prev => ({ ...prev, page: <Grove /> }))}>\r\n          way back to the grove\r\n        </Travel>{\" \"}\r\n        winds between the trees.\r\n      </p>\r\n      <AnimateOnChange>\r\n        <Response text={interactText} />\r\n      </AnimateOnChange>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OutsideGreenhouse;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { StoryContext } from \"../util/StoryContext\";\r\nimport Sub from \"../components/Sub\";\r\nimport Travel from \"../components/Travel\";\r\nimport Response from \"../components/Response\";\r\nimport { AnimateOnChange } from \"react-animation\";\r\nimport TSense from \"../mechanisms/TSense\";\r\nimport OutsideGreenhouse from \"./OutsideGreenhouse\";\r\nimport Floodgate from \"./Floodgate\";\r\n\r\nconst Grove = () => {\r\n  const [state, setState] = useContext(StoryContext);\r\n  const [interactText, setInteractText] = useState(\"\");\r\n  const lookStones = () => {\r\n    setInteractText(\r\n      \"The stones are perhaps a pound or two each, and number around 40. They seem to consist of all types of rock, but most seem to be limestone. The deliberateness behind their placement implies a certain mysticism that you cannot fathom.\"\r\n    );\r\n  };\r\n  const lookTree = () => {\r\n    setInteractText(\r\n      \"A redwood that stretches far beyond the rest of the forest, more like a mountain than a plant. Even its jagged, rough bark feels like a strata of wood. It would be too difficult to climb barehanded, but it might be managable with proper equipment.\"\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <h2>The Forest Grove</h2>\r\n      <p>\r\n        After a small hike through a verdant forest, the trees part, revealing a\r\n        small clearing in the middle of the woods. In the centre, a{\" \"}\r\n        <Sub c={lookStones}>ring of stones</Sub> circles a{\" \"}\r\n        <Sub c={lookTree}>tree taller than the rest</Sub>. The wind{\" \"}\r\n        <TSense\r\n          speed={2000}\r\n          items={[\"echoes\", \"murmurs\", \"whistles\", \"breezes\"]}\r\n        />{\" \"}\r\n        through the trees. Otherwise, the only notable feature is the path,\r\n        which spreads from one road into many. The path splits in a few\r\n        directions:\r\n      </p>\r\n      <ul>\r\n        {/* <li>\r\n          <Travel>Forward, towards the foot of the mountain</Travel>\r\n        </li> */}\r\n        <li>\r\n          <Travel\r\n            to={() =>\r\n              setState(prev => ({ ...prev, page: <OutsideGreenhouse /> }))\r\n            }\r\n          >\r\n            West, towards the sound of a mechanical hum\r\n          </Travel>\r\n        </li>\r\n        {/* <li>\r\n          <Travel>East, deeper into the forest</Travel>\r\n        </li> */}\r\n        <li>\r\n          <Travel\r\n            to={() => setState(prev => ({ ...prev, page: <Floodgate /> }))}\r\n          >\r\n            Back to towards the beach\r\n          </Travel>\r\n        </li>\r\n      </ul>\r\n      <AnimateOnChange>\r\n        <Response text={interactText} />\r\n      </AnimateOnChange>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Grove;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { StoryContext } from \"../util/StoryContext\";\r\nimport Sub from \"../components/Sub\";\r\nimport Travel from \"../components/Travel\";\r\nimport Response from \"../components/Response\";\r\nimport { AnimateOnChange } from \"react-animation\";\r\nimport Seaside from \"./Seaside\";\r\nimport Grove from \"./Grove\";\r\n\r\nconst Floodgate = () => {\r\n  const [state, setState] = useContext(StoryContext);\r\n  const [interactText, setInteractText] = useState(\"\");\r\n  const lookRubble = () => {\r\n    if (!state.inv[\"hasStone\"]) {\r\n      setState(prev => ({\r\n        ...prev,\r\n        inv: { ...prev.inv, hasStone: true }\r\n      }));\r\n      setInteractText(\r\n        \"You clear the rubble as best you can. Underneath, you find a small stone, its weight comforting in your hand. You decide to take it with you.\"\r\n      );\r\n    } else {\r\n      setInteractText(\"You find nothing further of note.\");\r\n    }\r\n  };\r\n  const lookWall = () => {\r\n    setInteractText(\r\n      <span>\r\n        The wall reaches about thirty feet high. The scored surface and blotches\r\n        of drained colour imply that waves from the sea once stretched to this\r\n        wall, but that hardly seems possible now. Despite the marked surface,\r\n        there are no handholds to safely climb. You don't see an end to the wall\r\n        in either direction, even after a few minutes of walking; it must{\" \"}\r\n        <Sub c={encloseAll}>enclose the whole island</Sub>.\r\n      </span>\r\n    );\r\n  };\r\n  const encloseAll = () => {\r\n    setInteractText(prev => (\r\n      <span>\r\n        You knew this was the case, of course. It's different seeing it in\r\n        person, the lengths some go to simply to isolate themselves.\r\n      </span>\r\n    ));\r\n  };\r\n  const raiseGate = () => {\r\n    setInteractText(\r\n      \"You search for many minutes, but find no mechanism to operate the enormous gears that lock the gate closed. Perhaps you need to look elsewhere on the island.\"\r\n    );\r\n  };\r\n  const lookTrees = () => {\r\n    setInteractText(\r\n      \"Faint fronds of green wave over the wall, as if taunting you. The trees that hold them must be absurdly tall.\"\r\n    );\r\n  };\r\n  const reportFloodgateStatus = () => {\r\n    return state.inv[\"floodgateOpen\"] ? (\r\n      <span>\r\n        The enormous floodgate is currently open, revealing a{\" \"}\r\n        <Travel to={() => setState(prev => ({ ...prev, page: <Grove /> }))}>\r\n          causeway\r\n        </Travel>{\" \"}\r\n        to the centre of the island.\r\n      </span>\r\n    ) : (\r\n      <span>\r\n        If you want to reach the inside of the island, you will need to{\" \"}\r\n        <Sub c={raiseGate}>raise the gate</Sub>.\r\n      </span>\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <h1>The Floodgate ({state.inv[\"floodgateOpen\"] ? \"Open\" : \"Closed\"})</h1>\r\n      <p>\r\n        Before you lies a massive floodgate. On each side, a long{\" \"}\r\n        <Sub c={lookWall}>perimeter wall</Sub> of concrete cuts off access to\r\n        the rest of the island, only the crowns of nearby{\" \"}\r\n        <Sub c={lookTrees}>palm trees</Sub> peeking over. A small pile of{\" \"}\r\n        <Sub c={lookRubble}>rubble</Sub> sits beside the wall.{\" \"}\r\n        {reportFloodgateStatus()} You can also{\" \"}\r\n        <Travel to={() => setState(prev => ({ ...prev, page: <Seaside /> }))}>\r\n          head west, back to the shore\r\n        </Travel>\r\n        .\r\n      </p>\r\n      <AnimateOnChange>\r\n        <Response text={interactText} />\r\n      </AnimateOnChange>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Floodgate;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { StoryContext } from \"../util/StoryContext\";\r\nimport Sub from \"../components/Sub\";\r\nimport Travel from \"../components/Travel\";\r\nimport Response from \"../components/Response\";\r\nimport Shack from \"./Shack\";\r\nimport Floodgate from \"./Floodgate\";\r\nimport { AnimateOnChange } from \"react-animation\";\r\n\r\nconst Seaside = () => {\r\n  const [, setState] = useContext(StoryContext);\r\n  const [interactText, setInteractText] = useState(\"\");\r\n  const lookSea = () => {\r\n    setInteractText(\r\n      \"It is nearly frozen, hostile to the touch and extends forever into the horizon. If there's a way across, it is not obvious now.\"\r\n    );\r\n  };\r\n  const lookSand = () => {\r\n    setInteractText(\r\n      \"The sand is wet but has no weight; it gives too easily. Standing in one place makes you feel like you're sinking into the shore; you shift your feet carefully.\"\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <h2>The Seaside</h2>\r\n      <p>\r\n        The <Sub c={lookSea}>sea</Sub> stretches forever in front of you, a\r\n        blanket of obsidian cold and forboding. You instinctively take a step\r\n        back, <Sub c={lookSand}>sand</Sub> buckling under your shoes. The walls\r\n        that surround the island lie{\" \"}\r\n        <Travel to={() => setState(prev => ({ ...prev, page: <Floodgate /> }))}>\r\n          north\r\n        </Travel>\r\n        , while a persistant wind urges you south, towards an{\" \"}\r\n        <Travel to={() => setState(prev => ({ ...prev, page: <Shack /> }))}>\r\n          abandoned shack.\r\n        </Travel>\r\n      </p>\r\n      <AnimateOnChange>\r\n        <Response text={interactText} />\r\n      </AnimateOnChange>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Seaside;\r\n","import React, { useContext } from \"react\";\r\nimport { StoryContext } from \"../util/StoryContext\";\r\nimport Travel from \"../components/Travel\";\r\nimport Seaside from \"./Seaside\";\r\n\r\nconst Intro = () => {\r\n  const [, setState] = useContext(StoryContext);\r\n  return (\r\n    <>\r\n      <h2>Interactive Story</h2>\r\n      <p>\r\n        This is an interactive story by Kelly Horan, created using Javascript\r\n        and React. Click on red links to investigate certain objects, and click\r\n        green links to travel to another location.\r\n      </p>\r\n      <p>\r\n        Please note this story is a work in progress; you can explore the\r\n        island, but there is currently no win condition.\r\n      </p>\r\n      <p>\r\n        <Travel to={() => setState(prev => ({ ...prev, page: <Seaside /> }))}>\r\n          Begin.\r\n        </Travel>\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Intro;\r\n","import React, { useState } from \"react\";\r\nimport Seaside from \"../pages/Seaside\";\r\nimport Intro from \"../pages/Intro\";\r\n\r\nconst StoryContext = React.createContext([{}, () => {}]);\r\n\r\nconst StoryProvider = props => {\r\n  const [state, setState] = useState({\r\n    page: <Intro />,\r\n    inv: {}\r\n  });\r\n  return (\r\n    <StoryContext.Provider value={[state, setState]}>\r\n      {props.children}\r\n    </StoryContext.Provider>\r\n  );\r\n};\r\n\r\nexport { StoryContext, StoryProvider };\r\n","import React, { useContext } from \"react\";\r\nimport { StoryContext } from \"../util/StoryContext\";\r\nimport { AnimateOnChange } from \"react-animation\";\r\n\r\nconst Story = () => {\r\n  const [state /*setState*/] = useContext(StoryContext);\r\n  return (\r\n    <div id=\"story-body\">\r\n      <AnimateOnChange>\r\n        <div className=\"page\">{state.page}</div>\r\n      </AnimateOnChange>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Story;\r\n","import \"./App.css\";\nimport React from \"react\";\nimport { AnimateOnChange } from \"react-animation\";\nimport { StoryProvider } from \"./util/StoryContext\";\nimport Story from \"./components/Story\";\nimport Inventory from \"./components/Inventory\";\n\nconst App = () => {\n  return (\n    <StoryProvider>\n      <div className=\"App\">\n        <header>{/* <Inventory /> */}</header>\n        <AnimateOnChange>\n          <Story />\n        </AnimateOnChange>\n      </div>\n    </StoryProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}